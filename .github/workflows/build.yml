name: Aura Arduino CLI Build

on:
  push:
    branches: [ "main", "feat/24-screen-support-ci" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ "28_ILI9341", "24_ILI9341", "24_ST7789" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Install ESP32 core & libraries
        run: |
          set -euxo pipefail
          arduino-cli core update-index
          arduino-cli core install esp32:esp32@2.0.17
          arduino-cli lib install \
            "ArduinoJson@7.4.1" \
            "WiFiManager@2.0.17" \
            "XPT2046_Touchscreen@1.4" \
            "TFT_eSPI@2.5.43" \
            "lvgl@9.2.2"

      - name: Make config headers visible to the sketch
        run: |
          set -euxo pipefail
          if [ -d config ]; then
            mkdir -p aura/config
            rsync -a config/ aura/config/
            echo "Copied ./config -> ./aura/config"
          else
            echo "::warning ::No ./config directory found"
          fi

      - name: Select TFT_eSPI User_Setup for ${{ matrix.target }}
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/Arduino/libraries/TFT_eSPI"
          case "${{ matrix.target }}" in
            28_ILI9341) SRC="TFT_eSPI/User_Setup_AURA_28_ILI9341.h" ;;
            24_ILI9341) SRC="TFT_eSPI/User_Setup_AURA_24_ILI9341.h" ;;
            24_ST7789)  SRC="TFT_eSPI/User_Setup_AURA_24_ST7789.h" ;;
          esac
          if [ ! -f "$SRC" ]; then
            echo "::error ::Missing $SRC in repo"; exit 1
          fi
          cp "$SRC" "$HOME/Arduino/libraries/TFT_eSPI/User_Setup.h"
          echo "Using $SRC â†’ \$HOME/Arduino/libraries/TFT_eSPI/User_Setup.h"

      - name: Compile ${{ matrix.target }}
        run: |
          set -euxo pipefail
          EXTRA_FLAGS=""
          # screen_select.h uses symbol-style flags
          if [ "${{ matrix.target }}" = "24_ILI9341" ]; then EXTRA_FLAGS='-DAURA_SCREEN_24_ILI9341'; fi
          if [ "${{ matrix.target }}" = "24_ST7789" ]; then EXTRA_FLAGS='-DAURA_SCREEN_24_ST7789'; fi

          OUT="out/${{ matrix.target }}"
          mkdir -p "$OUT"
          test -f aura/aura.ino || { echo "::error ::missing aura/aura.ino"; exit 1; }

          # Use LVGL built-in defaults and plain TFT_eSPI (no LVGL TFT_eSPI driver)
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            --board-options PartitionScheme=huge_app \
            --libraries /home/runner/Arduino/libraries \
            --build-property "build.extra_flags=$EXTRA_FLAGS -DLV_CONF_SKIP -DLV_USE_TFT_ESPI=1" \
            --export-binaries \
            --output-dir "$OUT" \
            aura

      - name: Collect artifacts ${{ matrix.target }}
        run: |
          set -euxo pipefail
          OUT="out/${{ matrix.target }}"
          mkdir -p "dist/${{ matrix.target }}"
          cp $(find "$OUT" -maxdepth 1 -type f -name "*.bin" ! -name "*partitions*.bin" ! -name "*bootloader*.bin" | head -n1) "dist/${{ matrix.target }}/app.bin"
          cp $(find "$OUT" -maxdepth 1 -type f -name "*bootloader*.bin" | head -n1) "dist/${{ matrix.target }}/bootloader.bin" || true
          cp $(find "$OUT" -maxdepth 1 -type f -name "*partitions*.bin" | head -n1) "dist/${{ matrix.target }}/partitions.bin" || true

          CORE="$HOME/.arduino15/packages/esp32/hardware/esp32/$(ls $HOME/.arduino15/packages/esp32/hardware/esp32 | tail -n1)"
          if [ -f "$CORE/tools/partitions/boot_app0.bin" ]; then
            cp "$CORE/tools/partitions/boot_app0.bin" "dist/${{ matrix.target }}/boot_app0.bin"
          fi

          for f in dist/${{ matrix.target }}/*.bin; do
            [ -s "$f" ] || { echo "::error file=$f::empty bin"; exit 1; }
          done
          ls -lh dist/${{ matrix.target }}

      - name: Upload ${{ matrix.target }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/${{ matrix.target }}
