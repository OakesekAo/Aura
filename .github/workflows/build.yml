name: Aura Arduino CLI Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        screen:
          - 28_ILI9341
          - 24_ILI9341
          - 24_ST7789
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v1
      - name: Install ESP32 core
          branches: [ "main", "feat/24-screen-support-ci" ]
      - name: Install libraries
          branches: [ "main" ]
        workflow_dispatch: {}
          arduino-cli lib install "ArduinoJson" "HTTPClient" "TFT_eSPI" "WiFiManager" "XPT2046_Touchscreen" "lvgl"
      - name: Prepare TFT_eSPI User_Setup
        run: |
          name: build (${{ matrix.target }})
          runs-on: ubuntu-latest
          strategy:
            fail-fast: false
            matrix:
              target: [ "28_ILI9341", "24_ILI9341", "24_ST7789" ]
      - name: Compile Aura
        run: |
          if [[ "${{ matrix.screen }}" == "28_ILI9341" ]]; then
            arduino-cli compile --fqbn esp32:esp32:esp32 --build-properties build.partitions=huge_app aura/weather.ino --output-dir ./bin/aura/2.8/
          else
            arduino-cli compile --fqbn esp32:esp32:esp32 --build-properties build.partitions=huge_app --build-properties build.extra_flags="-DAURA_SCREEN=${{ matrix.screen }}" aura/weather.ino --output-dir ./bin/aura/2.4/
          fi
<<<<<<< Updated upstream
      - name: Upload Artifacts
=======

      - name: Select TFT_eSPI User_Setup for ${{ matrix.target }}
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/Arduino/libraries/TFT_eSPI"
          # Try common locations for your custom setups
          case "${{ matrix.target }}" in
            28_ILI9341) CANDIDATES=("TFT_eSPI/User_Setup_AURA_28_ILI9341.h" "config/tft/User_Setup_AURA_28_ILI9341.h") ;;
            24_ILI9341) CANDIDATES=("TFT_eSPI/User_Setup_AURA_24_ILI9341.h" "config/tft/User_Setup_AURA_24_ILI9341.h") ;;
            24_ST7789)  CANDIDATES=("TFT_eSPI/User_Setup_AURA_24_ST7789.h"  "config/tft/User_Setup_AURA_24_ST7789.h") ;;
          esac
          SRC=""
          for p in "${CANDIDATES[@]}"; do
            if [ -f "$p" ]; then SRC="$p"; break; fi
          done
          if [ -z "$SRC" ]; then
            echo "::error ::Custom TFT_eSPI User_Setup not found for ${{ matrix.target }}"; exit 1
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: aura-${{ matrix.screen }}-bin
                path: |
                  ./bin/aura/2.8/*.bin
                  ./bin/aura/2.4/*.bin
          fi
          ls -l "$SRC"
          cp "$SRC" "$HOME/Arduino/libraries/TFT_eSPI/User_Setup.h"
          echo "Using $SRC â†’ $HOME/Arduino/libraries/TFT_eSPI/User_Setup.h"

      - name: Compile ${{ matrix.target }}
          run: |
            set -euxo pipefail
            EXTRA_FLAGS=""
            # Use symbol-style flags; screen_select.h switches by defined symbol
            if [ "${{ matrix.target }}" = "24_ILI9341" ]; then EXTRA_FLAGS='-DAURA_SCREEN_24_ILI9341'; fi
            if [ "${{ matrix.target }}" = "24_ST7789" ]; then EXTRA_FLAGS='-DAURA_SCREEN_24_ST7789'; fi
            OUT="out/${{ matrix.target }}"
            mkdir -p "$OUT"
            test -f aura/aura.ino || { echo "::error ::missing aura/aura.ino"; exit 1; }
            arduino-cli compile \
              --fqbn esp32:esp32:esp32 \
              --board-options PartitionScheme=huge_app \
              --build-property "build.extra_flags=$EXTRA_FLAGS ${{ steps.lvgl.outputs.FLAGS }} -DLV_USE_TFT_ESPI=1" \
              --build-property "compiler.cpp.extra_flags=-include preinclude.h" \
              --export-binaries \
              --output-dir "$OUT" \
              aura

      - name: Collect artifacts ${{ matrix.target }}
        run: |
          set -euxo pipefail
          OUT="out/${{ matrix.target }}"
          mkdir -p "dist/${{ matrix.target }}"
          # app.bin (sketch), bootloader.bin, partitions.bin from export-binaries output
          cp $(find "$OUT" -maxdepth 1 -type f -name "*.bin" ! -name "*partitions*.bin" ! -name "*bootloader*.bin" | head -n1) "dist/${{ matrix.target }}/app.bin"
          cp $(find "$OUT" -maxdepth 1 -type f -name "*bootloader*.bin" | head -n1) "dist/${{ matrix.target }}/bootloader.bin"
          cp $(find "$OUT" -maxdepth 1 -type f -name "*partitions*.bin" | head -n1) "dist/${{ matrix.target }}/partitions.bin"
          # boot_app0.bin from the ESP32 core
          CORE="$HOME/.arduino15/packages/esp32/hardware/esp32/$(ls $HOME/.arduino15/packages/esp32/hardware/esp32 | tail -n1)"
          cp "$CORE/tools/partitions/boot_app0.bin" "dist/${{ matrix.target }}/boot_app0.bin"
          # Guard: fail if any file is empty
          for f in dist/${{ matrix.target }}/*.bin; do
            [ -s "$f" ] || { echo "::error file=$f::empty bin"; exit 1; }
          done
          ls -lh dist/${{ matrix.target }}

      - name: Upload ${{ matrix.target }} artifacts
>>>>>>> Stashed changes
        uses: actions/upload-artifact@v4
        with:
          name: aura-${{ matrix.screen }}-bin
          path: |
            ./bin/aura/2.8/*.bin
            ./bin/aura/2.4/*.bin
